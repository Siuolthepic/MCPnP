plugins {
    id 'fabric-loom' version '0.4-SNAPSHOT'
    id 'maven-publish'
    id 'com.jfrog.bintray' version '1.8.4'
    //id 'com.github.johnrengelman.shadow' version '5.1.0'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

if (isNullOrEmpty(System.getenv("TRAVIS_TAG")) && !isNullOrEmpty(System.getenv('TRAVIS_BUILD_NUMBER'))) {
    version = project.modVersion + '+build.' + System.getenv('TRAVIS_BUILD_NUMBER')
} else {	
    version = project.modVersion + "+${project.minecraftVersion}"	
}
logger.lifecycle("${project.archivesBaseName} version ${project.version}")
group = project.mavenGroup

minecraft {
}
configurations {
    shadowed
}

repositories {
    //God only knows who hosts this maven and how reliable it is.
    maven {
        url 'https://src.me1312.net/maven/'
    }
	maven {
		url 'httpsL//fabricmc.net'
	}
}
dependencies {
    //to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraftVersion}"
    mappings "net.fabricmc:yarn:${project.yarnMappings}"
    modCompile "net.fabricmc:fabric-loader:${project.loaderVersion}"
    
    modCompile "io.github.prospector:modmenu:${project.modMenuVersion}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modCompile "net.fabricmc.fabric-api:fabric-api:${project.apiVersion}"

    compile "com.dosse.upnp:WaifUPnP:1.1" // the version is likely to never change
    shadowed "com.dosse.upnp:WaifUPnP:1.1"
    include "com.dosse.upnp:WaifUPnP:1.1"
    
    // PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
    // You may need to force-disable transitiveness on them.
}




// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
    options.charSet = 'UTF-8'
    options.links(
            'https://google.github.io/guava/releases/21.0/api/docs/',
            'http://asm.ow2.org/asm50/javadoc/user/',
            'https://docs.oracle.com/javase/8/docs/api/'
            // Need to add minecraft jd publication once there is one available
    )

    // Disable the crazy super-strict doclint tool in Java 8
    options.addStringOption('Xdoclint:none', '-quiet')
}

jar {
    from "LICENSE"
}

processResources {
    from sourceSets.main.resources

    inputs.properties "version": project.version, "description": project.description

    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"
        expand "version": project.version, "description": project.description
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "fabric.mod.json"
    }
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

task javadocs(type: Javadoc) {
    source = sourceSets.main.allJava
}

task javadocsJar(type: Jar, dependsOn: javadocs) {
    classifier = "javadocs"
    from javadocs.destinationDir
}
//shadowJar {
//    configurations = [project.configurations.fatCompile]
//}



artifacts {
    archives jar
    archives sourcesJar
    archives javadocsJar
}

bintray {
    user = project.hasProperty('bintrayUser') ? project.getProperty('bintrayUser') : System.getenv('bintray_user')
    key = project.hasProperty('bintrayKey') ? project.getProperty('bintrayKey') : System.getenv('bintray_key')
    publish = true
    override = true
    publications = ['mavenJava']
    pkg {
        repo = project.bintrayRepo
        name = project.archivesBaseName
        user = bintray.user
        userOrg = project.repoOwner
        licenses = [project.codeLicense]
        desc = project.description
        websiteUrl = "https://github.com/${project.repoOwner}/${project.archivesBaseName}"
        issueTrackerUrl = "https://github.com/${project.repoOwner}/${project.archivesBaseName}/issues"
        vcsUrl = "https://github.com/${project.repoOwner}/${project.archivesBaseName}.git"
        publicDownloadNumbers = true

        githubRepo = "${project.repoOwner}/${project.archivesBaseName}"
        version {
            name = project.version
            released = new Date()
            if (!isNullOrEmpty(System.getenv("TRAVIS_TAG"))) {
                vcsTag = System.getenv("TRAVIS_TAG")
            } else {
                vcsTag = ''
            }
        }
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(jar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
            artifact javadocsJar
        }
    }

    // select the repositories you want to publish to
    repositories {
        // uncomment to publish to the local maven
        // mavenLocal()
    }
}

static boolean isNullOrEmpty(String st) {
    return st == null || st.isEmpty()
}
